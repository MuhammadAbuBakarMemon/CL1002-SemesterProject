#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

struct vote
{
    char CNIC[14];
    bool hasvoted; 
    int election_ID; 
    char current_residence; // 'p' for in Pakistan, 'n' for outside Pakistan
};

typedef struct candidate
{
    int election_ID;
    char CandidateName[30];
    char Party_name[30];
    float votes_accumulated;
    char seat_no[50];       // Seat in the national assembly (e.g., NA-247) the candidate is contesting for
} can;

void feedback(int election_ID) {
    char response;
    
    printf("Would you like to provide feedback on the election process? (y/n): ");
    scanf(" %c", &response);  
    
    response = tolower(response);
    if (response == 'y') {
        FILE *feedbackFile = fopen("feedback.txt", "a+");
        if (feedbackFile == NULL) {
            printf("Error: Unable to open feedback file.\n");
            return;
        }

     
        char feedbackText[500];
        printf("Please provide your feedback: ");
        getchar(); 
        fgets(feedbackText, sizeof(feedbackText), stdin);
        feedbackText[strcspn(feedbackText, "\n")] = '\0';  

        fprintf(feedbackFile, "Feedback for Election ID %d: %s\n", election_ID, feedbackText);
        fclose(feedbackFile);
        printf("Thank you for your feedback!\n");
    } else {
        printf("No feedback provided. Thank you for voting!\n");
    }
}

void CastVote()
{
    printf("You have successfully logged in, Now proceeding towards casting your vote.\n");

    struct Date t_date;
    t_date.tm_date = 23;
    t_date.tm_month = 12;
    t_date.tm_year = 2024;

    if (!Deadline(t_date))
    {
        printf("The deadline for voting has passed...\n");
    }
    else
    {
        printf("You are just in time to cast your vote for this year's (2024) general elections.\n");

        printf("Below are the details of all the eligible candidates you may cast your vote for. ");
        printf("Remember, as a responsible citizen, it is our duty to ensure that the deserving candidate with a genuine mandate gets the National Assembly seat.\n");

        char s_no[50];
        while (getchar() != '\n');  

        printf("Please enter the seat number up for contestation at your registered polling station: \n");
        fgets(s_no, sizeof(s_no), stdin);
        s_no[strcspn(s_no, "\n")] = '\0';

        FILE *fptr;
        fptr = fopen("CandidateDetails.csv", "r");

        if (fptr == NULL)
        {
            printf("File not found.\n");
            printf("Exiting Program.\n");
            return;
        }

        printf("Below are the candidates that are contesting for the National Assembly seat number that you specified.\n");
        struct candidate c2;
        int flag = 0;

        while (fscanf(fptr, "%d %29s %29s %f %49s", &c2.election_ID, c2.CandidateName, c2.Party_name, &c2.votes_accumulated, c2.seat_no) == 5)
        {
            if (strcmp(c2.seat_no, s_no) == 0)
            {
                flag = 1;
                printf("Candidate details are as follows:\n");
                printf("Election ID: %d\n", c2.election_ID);
                printf("Candidate Name: %s\n", c2.CandidateName);
                printf("Party Name: %s\n", c2.Party_name);
                printf("Seat Number: %s\n", c2.seat_no);
            }
        }

        fclose(fptr);

        if (!flag)
        {
            printf("No candidate found for the seat number %s.\n", s_no);
            return;
        }

        int proceed = 0;
        printf("Press 1 to proceed if you have made your decision to vote: ");
        scanf("%d", &proceed);

        if (proceed == 1)
        {
            fptr = fopen("votesstorage.csv", "a+");

            if (fptr == NULL)
            {
                printf("File not found.\n");
                printf("Exiting Program.\n");
                return;
            }

            struct vote temp;
            struct vote reader;

            printf("Please enter your CNIC number: \n");
            fgets(temp.CNIC, 13, stdin);
            temp.CNIC[strcspn(temp.CNIC, "\n")] = '\0';

            while(fscanf(fptr, "%13s %d %d %c", reader.CNIC, &reader.hasvoted, &reader.election_ID, &reader.current_residence) == 4)
            {
                if (strcmp(reader.CNIC, temp.CNIC) == 0)
                {
                    if (reader.hasvoted == true)
                    {
                        printf("You have already voted for this election campaign....\n");
                        printf("Exiting Program.\n");
                        fclose(fptr);
                        return;
                    }
                }
            }

            printf("Please enter your current residence status 'p' for inside Pakistan, and 'n' for outside Pakistan: ");
            printf("Please note that current Pakistanis will have their votes counted by 1, and individuals who are not Pakistani residents will have their votes counted with 0.8 weightage.\n");
            scanf(" %c", &temp.current_residence);
            temp.current_residence = tolower(temp.current_residence);

            printf("Please enter the Election Id of the candidate you have opted to cast your vote to: \n");
            scanf("%d", &temp.election_ID);

            temp.hasvoted = true;

            fprintf(fptr, "%13s %d %d %c\n", temp.CNIC, temp.hasvoted, temp.election_ID, temp.current_residence);
            fclose(fptr);

            fptr = fopen("CandidateDetails.csv", "r+");

            if (fptr == NULL)
            {
                printf("File not found.\n");
                printf("Exiting Program.\n");
                return;
            }

            struct candidate iterater;

            while (fscanf(fptr, "%d %29s %29s %f %49s", &iterater.election_ID, iterater.CandidateName, iterater.Party_name, &iterater.votes_accumulated, iterater.seat_no) == 5)
            {
                if (iterater.election_ID == temp.election_ID)
                {
                    if (temp.current_residence == 'p')
                    {
                        iterater.votes_accumulated += 1;
                    }
                    else if (temp.current_residence == 'n')
                    {
                        iterater.votes_accumulated += 0.8;
                    }
                    fprintf(fptr, "%d %29s %29s %f %49s\n", iterater.election_ID, iterater.CandidateName, iterater.Party_name, iterater.votes_accumulated, iterater.seat_no);
                }
            }

            fclose(fptr);

         
            feedback(temp.election_ID);
        }
    }

    return 0;
}

int main(void)
{
    // Cast the vote
    CastVote();
    return 0;
}
